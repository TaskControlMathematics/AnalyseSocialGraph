import networkx
import numpy as np
import tqdm

def claster_cof(graph):
    claster_list = networkx.clustering(graph)
    clasters = claster_list.values()
    return sum(clasters)/graph.number_of_nodes()

def probability(graph):
    edges = len(graph.edjes())
    prod_edges = graph.number_of_nodes()**2
    return edges/prod_edges

count_nodes = 7115

list_edges = []
for i in range(1, count_nodes):
    if i % 3 == 1:
        list_edges.append((i, i+1))
        list_edges.append((i, i+2))
    else:
        list_edges.append((i, i+1))

n1 = np.random.randint(1,10)
n2 = np.random.randint(1,10)
n = [n1, n2]

wiki_vote_graph = networkx.read_edgelist('Wiki-Vote.txt', comments = '#', delimiter = '\t')

g = networkx.Graph()
d.add_edges_from(list_edges)


p_gr = probability(g)
p_wiki = probability(wiki_vote_graph)

print('коэфициент кластеризации регулярного графа: ' + str(claster_cof(g)))
print('вероятность регулярного графа: ' + str(p_gr))
print('коэфициент кластеризации Wiki-Vote графа: ' + str(claster_cof(wiki_vote_graph)))
print('вероятность Wiki-Vote графа: ' + str(p_wiki))

pbar = tqdm.tqdm(total=91500)
while p_wiki > p_gr:
    pbar.update(1)
    n1 = random.randint(1, count_nodes)
    n2 = random.randint(1, count_nodes)
    n = [n1, n2]
    g.add_edges(n1, n2)
    p_gr = probability(g)
pbar.close()


print('коэфициент кластеризации нового регулярного графа: ' + str(claster_cof(g)))
print('вероятность нового регулярного графа: ' + str(p_gr))
print('коэфициент кластеризации Wiki-Vote графа: ' + str(claster_cof(wiki_vote_graph)))
print('вероятность Wiki-Vote графа: ' + str(p_wiki))





